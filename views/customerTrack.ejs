<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0" />
    <title>
        <%= title %>
    </title>
    <link rel='stylesheet' href='/css/style.css' />
    <script src="/js/jquery.js"></script>
    <script src="/js/moment.min.js"></script>
    <!-- Change out the following API_KEY for your Maps API Key -->
    <script defer
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAK_2EtQ6DCp_4L69cuVm0sm3nnA1sV1xs&callback=initMap"></script>
</head>

<body>
    <!-- <div class="container">
        <%- data %>
    </div> -->

    <!-- App Capsule -->
    <div id="appCapsule">
        <div id="map" class="map"></div>
        <div id="request">
        </div>
    </div>
    <!-- * App Capsule -->

    <script src="/js/socket.io.js"></script>
    <script>
        // Global Variables
        var isDirectionApiUsed = true, destinationLocation;
        var map, destinationMarker, deliveryPersonMarker, deliveryToDestPolyline;
        var previousLat, previousLng, destLat, destLng, directionsService, directionsRenderer;

        function generateMarker({ position, icon, title }) {
            return new google.maps.Marker({
                position, icon, title, map,
                animation: google.maps.Animation.DROP,
            });
        }

        function drawPolyline({ directionResult }) {
            return new google.maps.Polyline({
                path: google.maps.geometry.encoding.decodePath(directionResult.routes[0].overview_polyline),
                geodesic: true, strokeColor: '#00bcd4', strokeOpacity: 1.0, strokeWeight: 2, map
            });
        }

        function getAngle(lat1, lng1, lat2, lng2) {
            //console.log("getAngle", lat1, lng1, lat2, lng2);
            let point1 = new google.maps.LatLng(lat1, lng1);
            let point2 = new google.maps.LatLng(lat2, lng2);
            let heading = google.maps.geometry.spherical.computeHeading(point1, point2);
            //console.log("getAngle1", heading);
            return parseInt(heading);
        }

        function getDistance(lat1, lng1, lat2, lng2) {
            let point1 = new google.maps.LatLng(lat1, lng1);
            let point2 = new google.maps.LatLng(lat2, lng2);
            let d = google.maps.geometry.spherical.computeDistanceBetween(point1, point2);
            //console.log("d", d);
            return parseInt(d);
        }

        // Map Initialize
        function initMap() {
            // You can pass the destination lat and lng in query params
            // In this example I will hardcode the value
            destLat = 30.71289;
            destLng = 76.72425;
            destinationLocation = new google.maps.LatLng(destLat, destLng);
            map = new google.maps.Map(document.getElementById('map'), {
                zoom: 14,
                center: destinationLocation
            });

            // Set Destination Marker
            destinationMarker = generateMarker({ position: destinationLocation, icon: '/images/dashboard/placemarker_red.png', title: 'Destination' })

            directionsService = new google.maps.DirectionsService();
            directionsRenderer = new google.maps.DirectionsRenderer({
                suppressMarkers: true, map,
                polylineOptions: {
                    strokeColor: "#79a1ee",
                    strokeOpacity: 1.0,
                    strokeWeight: 7
                }
            });
        }

        function onLocationChange(dataSnapshot) {

            nextLat = dataSnapshot.latitude;
            nextLng = dataSnapshot.longitude;
            let angle = 0;
            let distance = 0;

            if (deliveryPersonMarker) {
                previousLat = deliveryPersonMarker.position.lat();
                previousLng = deliveryPersonMarker.position.lng();
                angle = getAngle(previousLat, previousLng, nextLat, nextLng);
                distance = getDistance(previousLat, previousLng, nextLat, nextLng);
                // Direction API shoud be used once
                if (isDirectionApiUsed && distance > 5) {
                    let start = new google.maps.LatLng(parseFloat(dataSnapshot.latitude), parseFloat(dataSnapshot.longitude));
                    // Calculate and display Route
                    calculateRoute({ start, end: destinationLocation })
                }

                // Update Delivery Person Marker using animation
                animateMarkerNavigation({ current: { lat: deliveryPersonMarker.position.lat(), lng: deliveryPersonMarker.position.lng() }, next: { lat: parseFloat(dataSnapshot.latitude), lng: parseFloat(dataSnapshot.longitude) } })
                let icon = deliveryPersonMarker.getIcon();
                console.log("angle", angle);
                icon.rotation = angle;
                deliveryPersonMarker.setIcon(icon);

            } else {
                // Direction API shoud be used once
                if (isDirectionApiUsed) {
                    let start = new google.maps.LatLng(parseFloat(dataSnapshot.latitude), parseFloat(dataSnapshot.longitude));
                    // Calculate and display Route
                    calculateRoute({ start, end: destinationLocation })
                }

                // Set Delivery Person Marker on First Change
                deliveryPersonMarker = generateMarker({
                    position: { lat: parseFloat(dataSnapshot.latitude), lng: parseFloat(dataSnapshot.longitude) },
                    icon: { path: google.maps.SymbolPath.FORWARD_CLOSED_ARROW, scale: 5, rotation: angle }, title: 'Delivery Person'
                });
            }
        }

        function calculateRoute({ start, end }) {
            var request = {
                origin: start,
                destination: end,
                travelMode: 'DRIVING'
            };
            directionsService.route(request, function (result, status) {
                if (status == 'OK') {
                    //directionsRenderer.setDirections(result);
                    //isDirectionApiUsed = false
                    if (deliveryToDestPolyline != null) {
                        deliveryToDestPolyline.setMap(null);
                    }
                    deliveryToDestPolyline = drawPolyline({ directionResult: result })
                }
            });
        }

        // move marker from current to next position in 0.5 seconds
        function animateMarkerNavigation({ current, next }) {
            var deltalat = (next.lat - current.lat) / 100;
            var deltalng = (next.lng - current.lng) / 100;

            var delay = 10 * 0.5;
            for (var i = 0; i < 100; i++) {
                (function (ind) {
                    setTimeout(
                        function () {
                            var lat = deliveryPersonMarker.position.lat();
                            var lng = deliveryPersonMarker.position.lng();
                            lat += deltalat;
                            lng += deltalng;
                            latlng = new google.maps.LatLng(lat, lng);
                            deliveryPersonMarker.setPosition(latlng);
                        }, delay * ind
                    );
                })(i)
            }
        }

        $(function () {
            let obj = {
                customerId: '<%- userId %>',
                socketUrl: '<%- socketUrl %>'
            };
            const socket = io(obj.socketUrl);
            //console.log("socket", socket);
            const $container = $('#appCapsule');
            const $request = $('#request');

            socket.on('order_customer_socket', (data) => {
                console.log('order_customer_socket');
                $request.append(`<p class="text-center"><code>${JSON.stringify(data)}</code></p>`);
                if (data.driverLocation) {
                    let dataSnapshot = { latitude: data.driverLocation.coordinates[1], longitude: data.driverLocation.coordinates[0] };
                    onLocationChange(dataSnapshot);
                }
            });

            socket.on('order_customer_location_socket', (data) => {
                console.log("order_customer_location_socket", data);
                if (data.driverLocation) {
                    let dataSnapshot = { latitude: data.driverLocation.coordinates[1], longitude: data.driverLocation.coordinates[0] };
                    onLocationChange(dataSnapshot);
                }
            });

            socket.on('connect', function () {
                socket.emit('customersocket', obj, (ack) => {
                    console.log(ack.customerId + ' Joined!');
                });
            });
        });
    </script>
</body>

</html>